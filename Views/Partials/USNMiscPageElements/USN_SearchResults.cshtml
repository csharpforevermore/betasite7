@inherits UmbracoViewPage<USN.USNModels.USNBaseViewModel>

@using USNStarterKit.USNHelpers;
@using Examine.SearchCriteria;
@using Examine.LuceneEngine.SearchCriteria;
@using Umbraco.Web;
@using System.Text.RegularExpressions;

@{
    UsnglobalSettings globalSettings = (UsnglobalSettings)Model.GlobalSettings;

    if (globalSettings.SearchResultsPage != null)
    {
        UsnsearchResultsPage searchResultsPage = (UsnsearchResultsPage)Model.Content;

        int pageSize = searchResultsPage.SearchResultsPageSize; // How many items per page
        int page; // The page we are viewing
        string originalSearchTerm = String.Empty;
        string searchTerm = String.Empty;
        bool searchError = false;

        if (!String.IsNullOrEmpty(Context.Request.QueryString["search_field"]))
        {
            //Makes search query safe
            //Match all characters that DO NOT (^) match (\w alphanumeric characters) and \s (white space and tab) and - (hyphen) and replace them with ""
            originalSearchTerm = Request.QueryString["search_field"].Trim();
            searchTerm = Regex.Replace(originalSearchTerm, @"[^\w\s-]", "");

            //Match any white space character
            searchTerm = Regex.Replace(searchTerm, @"\s+", " ");
        }

        if (!int.TryParse(Request.QueryString["page"], out page))
        {
            page = 1;
        }

        Examine.Providers.BaseSearchProvider baseSearchProvider = ExamineManager.Instance.SearchProviderCollection["ExternalSearcher"];
        IEnumerable<SearchResult> results;
        List<IPublishedContent> nodes = new List<IPublishedContent>();
        int totalNodes = 0;
        int totalPages;

        if (!String.IsNullOrEmpty(searchTerm))
        {
            var criteria = baseSearchProvider.CreateSearchCriteria(IndexTypes.Content, BooleanOperation.And);
            var siteRootId = Model.Content.Site();

            //Field added via USNRegisterEvents class.
            var examineQuery = criteria.Field("searchablePath", siteRootId.ToString());
            examineQuery.Not().Field("umbracoNaviHide", 1.ToString());

            if (searchTerm.Contains(" "))
            {

                var terms = searchTerm.Split(' ').Select(x => x.MultipleCharacterWildcard()).ToArray();
                //Search limited to 4 terms: ref maxClauseCount is set to 1024
                if (terms.Length > 4)
                {
                    searchError = true;
                }
                else
                {
                    examineQuery.And().GroupedOr(new List<string> { "contents" }, terms);
                }
            }
            else
            {
                examineQuery.And().GroupedOr(new List<string> { "contents" }, searchTerm.MultipleCharacterWildcard());
            }

            if (!searchError)
            {
                results = baseSearchProvider.Search(examineQuery.Compile());

                //create a list of nodes based on parent page.
                foreach (var item in results)
                {
                    var node = Umbraco.TypedContent(item.Fields["id"]);

                    if (node != null)
                    {
                        //Check if node found has a parent redirect template. If it does we want to find the first parent page.
                        if (node.GetTemplateAlias() == "USNParentRedirect")
                        {
                            node = node.Ancestors().First(x => x.GetTemplateAlias() != "USNParentRedirect");
                        }

                        if (node.IsVisible())
                        {
                            nodes.Add(node);
                        }
                    }
                }

                //remove duplicates
                nodes = nodes.GroupBy(x => x.Id).Select(y => y.First()).ToList();

                totalNodes = nodes.Count;
                totalPages = (int)Math.Ceiling(totalNodes / (double)pageSize);

                if (page > totalPages)
                {
                    page = totalPages;
                }
                else if (page < 1)
                {
                    page = 1;
                }
            }
        }


        if (searchError)
        {
            <p>@umbraco.library.GetDictionaryItem("USN Search Term Limit")</p>
        }
        if (totalNodes == 0)
        {
            <p>@umbraco.library.GetDictionaryItem("USN Search Results Nothing Found")</p>
            @Html.Partial("USNForms/USN_SearchForm", Model)
        }
        else
        {
            int pages = (int)Math.Ceiling(totalNodes / (double)pageSize);

            //Please note the dictionary item should have a {0} and {1} placeholder for string formatting.
            string searchResultsFeedback = umbraco.library.GetDictionaryItem("USN Search Results Feedback");
            searchResultsFeedback = String.Format(searchResultsFeedback, originalSearchTerm, totalNodes);

            <p>@Html.Raw(searchResultsFeedback)</p>
            @Html.Partial("USNForms/USN_SearchForm", Model)

            <div class="listing vertical search">
                @foreach (var item in nodes.Skip((page - 1) * pageSize).Take(pageSize))
                {
                    <div class="item">
                        <p class="heading"><a class="c3-text" href="@item.Url">@item.Name</a></p>
                        @if (item.HasValue("metaDescription"))
                        {
                            <div class="text">@Html.Raw(umbraco.library.ReplaceLineBreaks(item.GetPropertyValue<string>("metaDescription")))</div>
                        }
                        <p class="link">@umbraco.library.GetDictionaryItem("USN Search Results Link Label") <a href="@item.Url">@item.Url</a></p>
                    </div>
                }
            </div>

            if (pages > 1)
            {
                <!-- PAGINATION -->
                @Html.Partial("USNMiscPageElements/USN_Paging", new ViewDataDictionary { { "totalPageCount", pages } })
                <!--// PAGINATION -->
            }
        }
    }
}

