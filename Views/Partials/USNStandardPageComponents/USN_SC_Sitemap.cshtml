@inherits UmbracoViewPage<Usn_Sc_Sitemap_AN>

@using USN.USNTemplate;

@using USNOptions = USNStarterKit.USNEnums.Options;

@{
    string anchorId = String.Empty;
    string customComponentClasses = String.Empty;

    string pageType = ViewData["pageType"] != null ? ViewData["pageType"].ToString() : "standard";

    USNTemplateStyleSettings settings;
    string animateClass = String.Empty;

    if (Model.Animate)
    {
        animateClass = "os-animation";
    }

    IPublishedContent startPage = Model.GetPropertyValue<IPublishedContent>("sitemapStartPage");

    if (pageType == "standard")
    {
        settings = USNViewTemplateHelper.GetDefaultTemplateStyleSettings();
    }
    else
    {
        settings = USNViewTemplateHelper.GetTemplateStyleSettings(Model.BackgroundColor, Model.ButtonColor);
    }

    @* Add div for column width on Advanced Pages *@
    if (pageType == "advanced")
    {

        if (Model.Width == USNOptions.ComponentWidth_Center)
        {
            @:<div class="container"><div class="row"><div class="mid-col col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12">
        }
        else if(Model.Width == USNOptions.ComponentWidth_Full)
        {
            @:<div class="container-fluid"><div class="row"><div class="wide-col col-xs-12">
        }
        else
        {
            @:<div class="container"><div class="row"><div class="wide-col col-xs-12">
        }
        
    }
    else
    {
        anchorId = "id=\"pos_" + Model.Id + "\" ";
        customComponentClasses = Model.CustomComponentClasses;
    }

    <!-- PAGE COMPONENT TEXT -->
    <div class="spc sitemap @animateClass @customComponentClasses" data-os-animation="fadeIn" data-os-animation-delay="0s" @Html.Raw(anchorId)>
        
        @Html.Partial("USNMiscPageElements/USN_ComponentIntro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

        @if (startPage != null)
        {
        <nav class="sitemap">
            <ul class="nav">
                <li>
                    <a href="@startPage.Url">
                        @if (startPage.HasValue("sitemapLinkText"))
                        {
                            @Html.Raw(startPage.GetPropertyValue<string>("sitemapLinkText"))
                        }
                        else
                        {
                            @startPage.Name
                        }
                    </a>
                    @Traverse(startPage)
                </li>
            </ul>
        </nav>
        }

        @Html.Partial("USNMiscPageElements/USN_ComponentOutro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

    </div>
    <!--// PAGE COMPONENT TEXT -->

    @* Close div for column width on Advanced Pages *@
    if (!Model.Parent.Parent.IsDocumentType(UsnstandardPage.ModelTypeAlias) && !Model.Parent.Parent.IsDocumentType(UsnstandardPageBlogPost.ModelTypeAlias))
    {
        @:</div></div></div>
    }

}


@helper Traverse(IPublishedContent node)
{
    IEnumerable<IPublishedContent> items;
    
    if(Model.IncludeProtectedPages)
    {
        items = node.Children.Where(x => (x.IsDocumentType(UsnstandardPage.ModelTypeAlias) || x.IsDocumentType(UsnadvancedPage.ModelTypeAlias) || x.IsDocumentType(UsnblogLandingPage.ModelTypeAlias) || x.IsDocumentType(UsnloginPage.ModelTypeAlias) || x.IsDocumentType(UsnsearchResultsPage.ModelTypeAlias)) && x.IsVisible());
    }
    else
    {
        items = node.Children.Where(x => (x.IsDocumentType(UsnstandardPage.ModelTypeAlias) || x.IsDocumentType(UsnadvancedPage.ModelTypeAlias) || x.IsDocumentType(UsnblogLandingPage.ModelTypeAlias) || x.IsDocumentType(UsnloginPage.ModelTypeAlias) || x.IsDocumentType(UsnsearchResultsPage.ModelTypeAlias)) && x.IsVisible() && !library.IsProtected(x.Id,x.Url));
    }

    

    if (items.Any())
    {
        <ul class="nav">
            @foreach (var item in items)
            {
                <li class="level-@item.Level">
                    <a href="@item.Url">
                        @if (item.HasValue("sitemapLinkText"))
                        {
                            @Html.Raw(item.GetPropertyValue<string>("sitemapLinkText"))
                        }
                        else
                        {
                            @item.Name
                        }
                    </a>
                    @Traverse(item)
                </li>
            }
        </ul>
    }

    var catFolder = node.Children.FirstOrDefault(x => x.IsDocumentType(UsnblogCategories.ModelTypeAlias));

    if (catFolder != null)
    {
        @TraverseCategories(catFolder)
    }
}

@helper TraverseCategories(IPublishedContent catFolder)
{
    var items = catFolder.Children.Where(x => (x.IsDocumentType(UsnblogCategoryPage.ModelTypeAlias)) && x.IsVisible());

    if (items.Any())
    {
        <ul class="nav">
            @foreach (var item in items)
            {
                <li class="level-@item.Level">
                    <a href="@item.Url">
                        @if (item.HasValue("sitemapLinkText"))
                        {
                            @Html.Raw(item.GetPropertyValue<string>("sitemapLinkText"))
                        }
                        else
                        {
                            @item.Name
                        }
                    </a>
                    @TraverseCategories(item)
                </li>
            }
        </ul>
    }
}