@inherits UmbracoViewPage<Usn_Sc_SubpageListing_AN>

@using USNStarterKit.USNHelpers;
@using USN.USNTemplate;
@using USNStarterKit.USNBlog;
@using USNStarterKit.USNModels;
@using Umbraco.Web.Models;

@using USNOptions = USNStarterKit.USNEnums.Options;

@{
    int globalSettingsId = Convert.ToInt32(ViewData["globalSettingsID"]);

    string anchorId = String.Empty;
    string customComponentClasses = String.Empty;

    USNTemplateStyleSettings settings;
    string animateClass = String.Empty;

    if (Model.Animate)
    {
        animateClass = "os-animation";
    }

    string pageType = ViewData["pageType"] != null ? ViewData["pageType"].ToString() : "standard";

    if (pageType == "standard")
    {
        settings = USNViewTemplateHelper.GetDefaultTemplateStyleSettings();
    }
    else
    {
        settings = USNViewTemplateHelper.GetTemplateStyleSettings(Model.BackgroundColor, Model.ButtonColor);
    }

    string textAlignment;

    switch (Model.IntroductionTextAlignment)
    {
        case USNOptions.TextAlignment_Left:
            textAlignment = "text-left";
            break;
        case USNOptions.TextAlignment_Center:
            textAlignment = "text-center";
            break;
        case USNOptions.TextAlignment_Right:
            textAlignment = "text-right";
            break;
        default:
            textAlignment = "text-left";
            break;
    }

    int summaryTextLength = 0;

    if (Model.SummaryTextCharacterCount.HasValue())
    {
        summaryTextLength = Model.SummaryTextCharacterCount;
    }

    int imageWidthSmall = 8;
    int imageHeightSmall = 6;
    string cropAlias = "Landscape";
    string circleClass = String.Empty;

    switch (Model.ImageStyle)
    {
        case USNOptions.ImageStyle_Square:
            imageWidthSmall = 8;
            imageHeightSmall = 8;
            cropAlias = "Square/Circle";
            break;
        case USNOptions.ImageStyle_Landscape:
            imageWidthSmall = 8;
            imageHeightSmall = 6;
            cropAlias = "Landscape";
            break;
        case USNOptions.ImageStyle_Portrait:
            imageWidthSmall = 6;
            imageHeightSmall = 8;
            cropAlias = "Portrait";
            break;
        case USNOptions.ImageStyle_Circle:
            imageWidthSmall = 8;
            imageHeightSmall = 8;
            cropAlias = "Square/Circle";
            circleClass = "img-circle";
            break;
        case USNOptions.ImageStyle_Wide:
            imageWidthSmall = 120;
            imageHeightSmall = 63;
            cropAlias = "Wide";
            break;
    }

    @* Add div for column width on Advanced Pages *@
    if (pageType == "advanced")
    {
        if (Model.Width == USNOptions.ComponentWidth_Center)
        {
            @:<div class="container"><div class="row"><div class="mid-col col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12">
        }
        else if(Model.Width == USNOptions.ComponentWidth_Full)
        {
            @:<div class="container-fluid"><div class="row"><div class="wide-col col-xs-12">
        }
        else
        {
            @:<div class="container"><div class="row"><div class="wide-col col-xs-12">
        }
        
    }
    else
    {
        anchorId = "id=\"pos_" + Model.Id + "\" ";
        customComponentClasses = Model.CustomComponentClasses;
    }

    string itemTextAlignment;

    switch (Model.ItemTextAlignment)
    {
        case USNOptions.TextAlignment_Left:
            itemTextAlignment = "text-left";
            break;
        case USNOptions.TextAlignment_Center:
            itemTextAlignment = "text-center";
            break;
        case USNOptions.TextAlignment_Right:
            itemTextAlignment = "text-right";
            break;
        default:
            itemTextAlignment = "text-left";
            break;
    }

    <!-- PAGE COMPONENT SUBPAGE LISTING -->
    <div class="spc listing @animateClass @customComponentClasses" data-os-animation="fadeIn" data-os-animation-delay="0s" @Html.Raw(anchorId)>

        @Html.Partial("USNMiscPageElements/USN_ComponentIntro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

        @{
            RelatedLinks listingPages = Model.LinkToListing;

            if (listingPages != null && listingPages.Any())
            {
                string itemsPerRow = String.Empty;

                if (Model.ItemsPerRow.HasValue())
                {
                    switch (Model.ItemsPerRow)
                    {
                        case USNOptions.ItemsPerRow_1:
                            itemsPerRow = "items-1";
                            break;
                        case USNOptions.ItemsPerRow_2:
                            itemsPerRow = "items-2";
                            break;
                        case USNOptions.ItemsPerRow_3:
                            itemsPerRow = "items-3";
                            break;
                        case USNOptions.ItemsPerRow_4:
                            itemsPerRow = "items-4";
                            break;
                        default:
                            itemsPerRow = "items-4";
                            break;
                    }
                }

                int listPage = 1;

                if (listingPages.Count() > 1)
                {
                    <!-- ROW -->
                    <div class="row @textAlignment">

                        <nav class="tabs col-xs-12">
                            <ul class="nav nav-tabs" role="tablist">
                                @foreach (RelatedLink link in listingPages)
                                {
                                    USNLink page = USNUrlHelper.GetLinkFromRelatedLink(link);

                                    if (page != null && (page.InternalNode.IsDocumentType(UsnstandardPage.ModelTypeAlias) || page.InternalNode.IsDocumentType(UsnadvancedPage.ModelTypeAlias) || page.InternalNode.IsDocumentType(UsnblogLandingPage.ModelTypeAlias) || page.InternalNode.IsDocumentType(UsnblogCategoryPage.ModelTypeAlias)))
                                    {
                                        <li role="presentation" @if (listPage == 1) { @Html.Raw("class=\"active\"")   }>
                                            <a href="#tab-name-@Model.Id-@listPage" aria-controls="tab-name-@Model.Id-@listPage" role="tab" data-toggle="tab">
                                                @page.LinkCaption
                                            </a>
                                        </li>
                                        listPage += 1;
                                    }
                                }
                            </ul>
                        </nav>

                    </div>
	                    <!--// ROW -->
                }

                listPage = 1;

                <div class="tab-content">

                    @foreach (RelatedLink link in listingPages)
                    {
                        <div id="tab-name-@Model.Id-@listPage" role="tabpanel" class="tab-pane @if(listPage == 1){@Html.Raw("active")}">
                            
                                <!-- ROW -->
                                <div class="row @itemTextAlignment">
                                @{
                                    USNLink page = USNUrlHelper.GetLinkFromRelatedLink(link);

                                    if (page != null && (page.InternalNode.IsDocumentType(UsnstandardPage.ModelTypeAlias) || page.InternalNode.IsDocumentType(UsnadvancedPage.ModelTypeAlias)))
                                    {
                                        var pages = page.InternalNode.Children.Where(x => x.IsDocumentType(UsnstandardPage.ModelTypeAlias) || x.IsDocumentType(UsnadvancedPage.ModelTypeAlias));

                                        if (Model.PagesToDisplay.HasValue() && Model.PagesToDisplay != 0)
                                        {
                                            pages = pages.Take(Model.PagesToDisplay).ToList();
                                        }

                                        foreach (var item in pages)
                                        {
                                            Boolean displaySummaryText = false;
                                            string introText = String.Empty;

                                            if (item.HasValue("pageSummary"))
                                            {
                                                introText = item.GetPropertyValue<string>("pageSummary");
                                                displaySummaryText = true;
                                            }
                                            else
                                            {
                                                if (summaryTextLength > 0 && item.HasProperty("bodyText"))
                                                {
                                                    introText = item.GetPropertyValue<string>("bodyText").StripHtml().Trim();

                                                    displaySummaryText = true;

                                                    if (introText.Length >= summaryTextLength)
                                                    {
                                                        introText = introText.Substring(0, summaryTextLength);
                                                    }

                                                    if (introText.Length > 0)
                                                    {
                                                        introText = "<p>" + introText + " ...</p>";
                                                    }
                                                }
                                            }

                                            string pageName = item.HasValue("subpageListingLinkText") ? item.GetPropertyValue<string>("subpageListingLinkText") : item.Name;

                                            if (Model.ListingLayout != USNOptions.ListingStyle_Grid)
                                            {
                                                string textClass = String.Empty;

                                                <div class="item @circleClass @itemsPerRow col-xs-12 @animateClass" data-os-animation="fadeIn" data-os-animation-delay="0s">
                                                    <div class="row">
                                                        @if (item.HasValue("pageListingImage") && item.GetPropertyValue<IPublishedContent>("pageListingImage") != null)
                                                        {
                                                            textClass = "col-sm-7 pull-left";

                                                            <div class="col-sm-4 pull-right col-xs-12 text-right">
                                                                <div class="image @circleClass">
                                                                    <a href="@item.Url">
                                                                        <img class="@circleClass lazyload" src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall))" data-src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias))" alt="@(item.GetPropertyValue<string>("pageListingImageAltText"))">
                                                                    </a>
                                                                </div>
                                                            </div>
                                                        }
                                                        <div class="info @textClass col-xs-12">
                                                            <a href="@item.Url">
                                                                <p class="heading @settings.HeadingStyle">@Html.Raw(pageName)</p>
                                                            </a>
                                                            @if (displaySummaryText && introText != String.Empty)
                                                            {
                                                                <div class="text @settings.TextStyle">@Html.Raw(introText)</div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {

                                                <div class="item @circleClass @itemsPerRow col-xs-12 @animateClass" data-os-animation="fadeIn" data-os-animation-delay="0s">
                                                    <a href="@item.Url">
                                                        @if (item.HasValue("pageListingImage") && item.GetPropertyValue<IPublishedContent>("pageListingImage") != null)
                                                        {
                                                            <div class="image @circleClass">
                                                                <img class="@circleClass lazyload" src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall))" data-src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias))" alt="@(item.GetPropertyValue<string>("pageListingImageAltText"))">
                                                            </div>
                                                        }
                                                        <p class="heading @settings.HeadingStyle">@Html.Raw(pageName)</p>
                                                    </a>
                                                    @if (displaySummaryText && introText != String.Empty)
                                                    {
                                                        <div class="text @settings.TextStyle">@Html.Raw(introText)</div>
                                                    }
                                                </div>
                                            }
                                        }



                                    }
                                    else if (page != null && (page.InternalNode.IsDocumentType(UsnblogLandingPage.ModelTypeAlias) || page.InternalNode.IsDocumentType(UsnblogCategoryPage.ModelTypeAlias)))
                                    {
                                        string category = null;
                                        IPublishedContent blogLandingPage;

                                        if (page.InternalNode.IsDocumentType(UsnblogCategoryPage.ModelTypeAlias))
                                        {
                                            category = page.InternalNode.Id.ToString();
                                            blogLandingPage = page.InternalNode.AncestorOrSelf(UsnblogLandingPage.ModelTypeAlias);
                                        }
                                        else
                                        {
                                            blogLandingPage = page.InternalNode;
                                        }

                                        int pagesToDisplay = (Model.PagesToDisplay.HasValue() && Model.PagesToDisplay != 0) ? Model.PagesToDisplay : - 1;

                                        USNSearchResults searchResult = USNBlogPostService.Instance.GetPostItems(blogLandingPage, null, null, category, 1, pagesToDisplay);

                                        foreach (var post in searchResult.SearchResults)
                                        {
                                            Boolean displaySummaryText = false;
                                            string introText = String.Empty;

                                            if (post.HasValue("pageSummary"))
                                            {
                                                introText = post.GetPropertyValue<string>("pageSummary");
                                                displaySummaryText = true;
                                            }
                                            else
                                            {
                                                if (summaryTextLength > 0 && post.HasProperty("bodyText"))
                                                {
                                                    introText = post.GetPropertyValue<string>("bodyText").StripHtml().Trim();

                                                    displaySummaryText = true;

                                                    if (introText.Length >= summaryTextLength)
                                                    {
                                                        introText = introText.Substring(0, summaryTextLength);
                                                    }

                                                    if (introText.Length > 0)
                                                    {
                                                        introText = "<p>" + introText + " ...</p>";
                                                    }
                                                }
                                            }

                                            string postName = post.HasValue("onPageTitle") ? post.GetPropertyValue<string>("onPageTitle") : post.Name;

                                            if (Model.ListingLayout != USNOptions.ListingStyle_Grid)
                                            {
                                                string textClass = String.Empty;

                                                <div class="item @circleClass @itemsPerRow col-xs-12 @animateClass" data-os-animation="fadeIn" data-os-animation-delay="0s">
                                                    <div class="row">
                                                        @if (post.HasValue("pageListingImage") && post.GetPropertyValue<IPublishedContent>("pageListingImage") != null)
                                                        {
                                                            textClass = "col-sm-7 pull-left";

                                                            <div class="col-sm-4 pull-right col-xs-12 text-right">
                                                                <div class="image @circleClass">
                                                                    <a href="@post.Url">
                                                                        <img class="@circleClass lazyload" src="@(post.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall))" data-src="@(post.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias))" alt="@(post.GetPropertyValue<string>("pageListingImageAltText"))">
                                                                    </a>
                                                                </div>
                                                            </div>
                                                        }
                                                        <div class="info @textClass col-xs-12">
                                                            <a href="@post.Url">
                                                                <p class="heading @settings.HeadingStyle">@Html.Raw(postName)</p>
                                                            </a>
                                                            @if (displaySummaryText && introText != String.Empty)
                                                            {
                                                                <div class="text @settings.TextStyle">@Html.Raw(introText)</div>
                                                            }

                                                            @Html.Partial("USNBlog/USN_BlogMeta", post, new ViewDataDictionary { { "textStyle", settings.TextStyle }, { "globalSettingsID", globalSettingsId } })

                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {

                                                <div class="item @circleClass @itemsPerRow col-xs-12 @animateClass" data-os-animation="fadeIn" data-os-animation-delay="0s">
                                                    <a href="@post.Url">
                                                        @if (post.HasValue("pageListingImage") && post.GetPropertyValue<IPublishedContent>("pageListingImage") != null)
                                                        {
                                                            <div class="image @circleClass">
                                                                <img class="@circleClass lazyload" src="@(post.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall))" data-src="@(post.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias))" alt="@(post.GetPropertyValue<string>("pageListingImageAltText"))">
                                                            </div>
                                                        }
                                                        <p class="heading @settings.HeadingStyle">@Html.Raw(postName)</p>
                                                    </a>
                                                    @if (displaySummaryText && introText != String.Empty)
                                                    {
                                                        <div class="text @settings.TextStyle">@Html.Raw(introText)</div>
                                                    }

                                                    @Html.Partial("USNBlog/USN_BlogMeta", post, new ViewDataDictionary { { "textStyle", settings.TextStyle }, { "globalSettingsID", globalSettingsId } })
                                                </div>
                                            }
                                        }
                                    }
                                }
                                </div>
                                <!--// ROW -->

                            </div>
                            
                            listPage += 1;

                    }

                </div>

                
            }
        }
    
        @Html.Partial("USNMiscPageElements/USN_ComponentOutro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })
    
    </div>
    <!-- PAGE COMPONENT SUBPAGE LISTING -->

    @* Close div for column width on Advanced Pages *@
    if (!Model.Parent.Parent.IsDocumentType(UsnstandardPage.ModelTypeAlias) && !Model.Parent.Parent.IsDocumentType(UsnstandardPageBlogPost.ModelTypeAlias))
    {
        @:</div></div></div>
    }
}
