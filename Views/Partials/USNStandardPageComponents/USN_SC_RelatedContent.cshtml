@inherits UmbracoViewPage<Usn_Sc_RelatedContent_AN>

@using USNStarterKit.USNHelpers;
@using USN.USNTemplate;

@using USNOptions = USNStarterKit.USNEnums.Options;

@{
    int globalSettingsId = Convert.ToInt32(ViewData["globalSettingsID"]);

    string anchorId = String.Empty;
    string customComponentClasses = String.Empty;

    USNTemplateStyleSettings settings;
    string animateClass = String.Empty;

    if (Model.Animate)
    {
        animateClass = "os-animation";
    }

    string pageType = ViewData["pageType"] != null ? ViewData["pageType"].ToString() : "standard";

    if (pageType == "standard")
    {
        settings = USNViewTemplateHelper.GetDefaultTemplateStyleSettings();
    }
    else
    {
        settings = USNViewTemplateHelper.GetTemplateStyleSettings(Model.BackgroundColor, Model.ButtonColor);
    }

    @* Add div for column width on Advanced Pages *@
    if (pageType == "advanced")
    {
        if (Model.Width == USNOptions.ComponentWidth_Center)
        {
            @:<div class="container"><div class="row"><div class="mid-col col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12">
        }
        else if (Model.Width == USNOptions.ComponentWidth_Full)
        {
            @:<div class="container-fluid"><div class="row"><div class="wide-col col-xs-12">
        }
        else
        {
            @:<div class="container"><div class="row"><div class="wide-col col-xs-12">
        }

    }
    else
    {
        anchorId = "id=\"pos_" + Model.Id + "\" ";
        customComponentClasses = Model.CustomComponentClasses;
    }

    <div class="spc related-content @animateClass @Model.CustomComponentClasses" data-os-animation="fadeIn" data-os-animation-delay="0s" @Html.Raw(anchorId)>
                       
        @Html.Partial("USNMiscPageElements/USN_ComponentIntro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

        <!-- LISTING -->
        <div class="listing">

        @{
            IEnumerable<IPublishedContent> relatedContent = null;

            if (Model.RelatedContent.HasValue())
            {
                relatedContent = Model.RelatedContent.Where(x => x.IsDocumentType(UsnadvancedPageBlogPost.ModelTypeAlias) ||
                    x.IsDocumentType(UsnstandardPageBlogPost.ModelTypeAlias) || x.IsDocumentType(UsnstandardPage.ModelTypeAlias)
                    || x.IsDocumentType(UsnadvancedPage.ModelTypeAlias));
            }

            if (relatedContent != null && relatedContent.Any())
            {
                decimal autoRotateSpeed = 0;
                string slickAttributes = Model.EnableCarousel ? "data-slick='{{{0}{1}{2}{3}}}'" : "";
                string autoRotateAttribute = String.Empty;
                string slidesToShowAttribute = String.Empty;
                string dotsAttribute = Model.ShowDots ? "\"dots\": true " : "\"dots\": false ";
                string arrowsAttribute = Model.ShowArrows ? "\"arrows\": true " : "\"arrows\": false ";

                if (Model.EnableCarousel && Model.AutoRotateSpeed.HasValue())
                {
                    autoRotateSpeed = Model.AutoRotateSpeed;
                    if (autoRotateSpeed > 0)
                    {
                        autoRotateSpeed = autoRotateSpeed * 1000;
                        autoRotateAttribute = "\"autoplay\": true, \"autoplaySpeed\": " + Convert.ToInt32(autoRotateSpeed);
                    }
                }

                string itemsPerRow = String.Empty;
                string slidesToShow = String.Empty;

                switch (Model.ItemsPerRow)
                {
                    case USNOptions.ItemsPerRow_1:
                        if (Model.EnableCarousel)
                        {
                            slidesToShowAttribute = "\"slidesToShow\": 1";
                            itemsPerRow = "items-1";
                        }
                        else
                        {
                            itemsPerRow = "items-1 col-xs-12";
                        }
                        break;
                    case USNOptions.ItemsPerRow_2:
                        if (Model.EnableCarousel)
                        {
                            slidesToShowAttribute = "\"slidesToShow\": 2, \"responsive\": [{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                            itemsPerRow = "items-2";
                        }
                        else
                        {
                            itemsPerRow = "items-2 col-xs-12";
                        }
                        break;
                    case USNOptions.ItemsPerRow_3:
                        if (Model.EnableCarousel)
                        {
                            slidesToShowAttribute = "\"slidesToShow\": 3, \"responsive\": [{\"breakpoint\": 768,\"settings\": {\"slidesToShow\": 2}},{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                            itemsPerRow = "items-3";
                        }
                        else
                        {
                            itemsPerRow = "items-3 col-xs-12";
                        }
                        break;
                    case USNOptions.ItemsPerRow_4:
                        if (Model.EnableCarousel)
                        {
                            slidesToShowAttribute = "\"slidesToShow\": 4, \"responsive\": [{\"breakpoint\": 992,\"settings\": {\"slidesToShow\": 3}},{\"breakpoint\": 768,\"settings\": {\"slidesToShow\": 2}},{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                            itemsPerRow = "items-4";
                        }
                        else
                        {
                            itemsPerRow = "items-4 col-xs-12";
                        }
                        break;
                    default:
                        if (Model.EnableCarousel)
                        {
                            slidesToShowAttribute = "\"slidesToShow\": 1";
                            itemsPerRow = "items-1";
                        }
                        else
                        {
                            itemsPerRow = "items-1 col-xs-12";
                        }
                        break;
                }

                //Add commas
                dotsAttribute = autoRotateAttribute != String.Empty ? dotsAttribute = "," + dotsAttribute : dotsAttribute;
                arrowsAttribute = autoRotateAttribute != String.Empty || dotsAttribute != String.Empty ? "," + arrowsAttribute : arrowsAttribute;
                slidesToShowAttribute = autoRotateAttribute != String.Empty || dotsAttribute != String.Empty || arrowsAttribute != String.Empty ? "," + slidesToShowAttribute : slidesToShowAttribute;

                slickAttributes = Model.EnableCarousel ? String.Format(slickAttributes, autoRotateAttribute, dotsAttribute, arrowsAttribute, slidesToShowAttribute) : String.Empty;

                int summaryTextLength = Model.SummaryTextCharacterCount.HasValue() ? Model.SummaryTextCharacterCount : 0;

                string itemTextAlignment;

                switch (Model.ItemTextAlignment)
                {
                    case USNOptions.TextAlignment_Left:
                        itemTextAlignment = "text-left";
                        break;
                    case USNOptions.TextAlignment_Center:
                        itemTextAlignment = "text-center";
                        break;
                    case USNOptions.TextAlignment_Right:
                        itemTextAlignment = "text-right";
                        break;
                    default:
                        itemTextAlignment = "text-left";
                        break;
                }

                int imageWidthSmall = 8;
                int imageHeightSmall = 6;
                string cropAlias = "Landscape";
                string circleClass = String.Empty;
                string wideImageClass = String.Empty;

                switch (Model.ImageStyle)
                {
                    case USNOptions.ImageStyle_Square:
                        imageWidthSmall = 8;
                        imageHeightSmall = 8;
                        cropAlias = "Square/Circle";
                        break;
                    case USNOptions.ImageStyle_Landscape:
                        imageWidthSmall = 8;
                        imageHeightSmall = 6;
                        cropAlias = "Landscape";
                        break;
                    case USNOptions.ImageStyle_Portrait:
                        imageWidthSmall = 6;
                        imageHeightSmall = 8;
                        cropAlias = "Portrait";
                        break;
                    case USNOptions.ImageStyle_Circle:
                        imageWidthSmall = 8;
                        imageHeightSmall = 8;
                        cropAlias = "Square/Circle";
                        circleClass = "img-circle";
                        break;
                    case USNOptions.ImageStyle_Wide:
                        imageWidthSmall = 120;
                        imageHeightSmall = 63;
                        cropAlias = "Wide";
                        wideImageClass = "wide-image";
                        break;
                }

                if (Model.EnableCarousel)
                {
                    @:<div class="row slides @itemTextAlignment" @Html.Raw(slickAttributes)>
                }
                else
                {
                    @:<div class="row @itemTextAlignment">
                }

                foreach (var item in relatedContent)
                {
                    Boolean displaySummaryText = false;
                    string introText = String.Empty;

                    if (item.HasValue("pageSummary"))
                    {
                        introText = item.GetPropertyValue<string>("pageSummary");
                        displaySummaryText = true;
                    }
                    else
                    {
                        if (summaryTextLength > 0 && item.HasProperty("bodyText"))
                        {
                            introText = item.GetPropertyValue<string>("bodyText").StripHtml().Trim();

                            displaySummaryText = true;

                            if (introText.Length >= summaryTextLength)
                            {
                                introText = introText.Substring(0, summaryTextLength);
                            }

                            if (introText.Length > 0)
                            {
                                introText = "<p>" + introText + " ...</p>";
                            }
                        }
                    }

                    if (item.IsDocumentType(UsnadvancedPageBlogPost.ModelTypeAlias) || item.IsDocumentType(UsnstandardPageBlogPost.ModelTypeAlias))
                    {

                        <!-- ITEM -->
                        <div class="item @circleClass @itemsPerRow @wideImageClass">

                            @{

                                string itemName = item.HasValue("onPageTitle") ? item.GetPropertyValue<string>("onPageTitle") : item.Name;

                                if (item.GetPropertyValue<Image>("pageListingImage") != null)
                                {
                                    <div class="image @circleClass"><a href="@item.Url"><img class="@circleClass lazyload" src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall))" data-src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias))" alt="@(item.GetPropertyValue<string>("pageListingImageAltText"))"></a></div>
                                }

                            }
                            
                            <div class="info">
                                <a href="@item.Url">
                                    <p class="heading @settings.HeadingStyle">
                                        @itemName
                                    </p>
                                </a>
                                @if (displaySummaryText && introText != String.Empty)
                                {
                                    <div class="text @settings.TextStyle">@Html.Raw(introText)</div>
                                }

                                @Html.Partial("USNBlog/USN_BlogMeta", item, new ViewDataDictionary { { "textStyle", settings.TextStyle }, { "globalSettingsID", globalSettingsId } })
                            </div>
                        </div>
                        <!--// ITEM -->

                    }
                    else if(item.IsDocumentType(UsnadvancedPage.ModelTypeAlias) || item.IsDocumentType(UsnstandardPage.ModelTypeAlias))
                    {
                        <!-- ITEM -->
                        <div class="item @circleClass @itemsPerRow @wideImageClass">
                            
                            @{

                                string itemName = item.HasValue("subPageListingLinkText") ? item.GetPropertyValue<string>("subPageListingLinkText") : item.Name;

                                if (item.GetPropertyValue<Image>("pageListingImage") != null)
                                {
                                    <div class="image @circleClass"><a href="@item.Url"><img class="@circleClass lazyload" src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall))" data-src="@(item.GetPropertyValue<Image>("pageListingImage").GetCropUrl(cropAlias: cropAlias))" alt="@(item.GetPropertyValue<string>("pageListingImageAltText"))"></a></div>
                                }

                            }
                            
                            <div class="info">
                                <a href="@item.Url">
                                    <p class="heading @settings.HeadingStyle">
                                        @itemName
                                    </p>
                                </a>
                                @if (displaySummaryText && introText != String.Empty)
                                {
                                    <div class="text @settings.TextStyle">@Html.Raw(introText)</div>
                                }
                            </div>

                        </div>
                        <!--// ITEM -->
                    }
                }

                @:</div>
            }
        }

        </div>
        <!--// LISTING -->

        @Html.Partial("USNMiscPageElements/USN_ComponentOutro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

    </div>

    @* Close div for column width on Advanced Pages *@
    if (!Model.Parent.Parent.IsDocumentType(UsnstandardPage.ModelTypeAlias) && !Model.Parent.Parent.IsDocumentType(UsnstandardPageBlogPost.ModelTypeAlias))
    {
        @:</div></div></div>
    }

}
