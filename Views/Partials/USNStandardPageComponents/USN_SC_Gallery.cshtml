@inherits UmbracoViewPage<Usn_Sc_Gallery_AN>

@using USNStarterKit.USNHelpers;
@using USN.USNTemplate;
@using USNStarterKit.USNModels;

@using USNOptions = USNStarterKit.USNEnums.Options;

@{
    string anchorId = String.Empty;
    string customComponentClasses = String.Empty;

    USNTemplateStyleSettings settings;
    string animateClass = String.Empty;

    if (Model.Animate)
    {
        animateClass = "os-animation";
    }

    string pageType = ViewData["pageType"] != null ? ViewData["pageType"].ToString() : "standard";

    if (pageType == "standard")
    {
        settings = USNViewTemplateHelper.GetDefaultTemplateStyleSettings();
    }
    else
    {
        settings = USNViewTemplateHelper.GetTemplateStyleSettings(Model.BackgroundColor, Model.ButtonColor);
    }

    @* Add div for column width on Advanced Pages *@
    if (pageType == "advanced")
    {
        if (Model.Width == USNOptions.ComponentWidth_Center)
        {
            @:<div class="container"><div class="row"><div class="mid-col col-md-8 col-md-offset-2 col-sm-10 col-sm-offset-1 col-xs-12">
        }
        else if(Model.Width == USNOptions.ComponentWidth_Full)
        {
            @:<div class="container-fluid"><div class="row"><div class="wide-col col-xs-12">
        }
        else
        {
            @:<div class="container"><div class="row"><div class="wide-col col-xs-12">
        }
        
    }
    else
    {
        anchorId = "id=\"pos_" + Model.Id + "\" ";
        customComponentClasses = Model.CustomComponentClasses;
    }

    <!-- PAGE COMPONENT GALLERY -->
    <div class="spc gallery @animateClass @customComponentClasses" data-os-animation="fadeIn" data-os-animation-delay="0s" @Html.Raw(anchorId)>

        @Html.Partial("USNMiscPageElements/USN_ComponentIntro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

        @if (Model.ImageVideo != null)
        {
            decimal autoRotateSpeed = 0;
            string slickAttributes = Model.EnableCarousel ? "data-slick='{{{0}{1}{2}{3}}}'" : "";
            string autoRotateAttribute = String.Empty;
            string slidesToShowAttribute = String.Empty;
            string dotsAttribute = Model.ShowDots ? "\"dots\": true " : "\"dots\": false ";
            string arrowsAttribute = Model.ShowArrows ? "\"arrows\": true " : "\"arrows\": false ";

            if (Model.EnableCarousel && Model.AutoRotateSpeed.HasValue())
            {
                autoRotateSpeed = Model.AutoRotateSpeed;
                if (autoRotateSpeed > 0)
                {
                    autoRotateSpeed = autoRotateSpeed * 1000;
                    autoRotateAttribute = "\"autoplay\": true, \"autoplaySpeed\": " + Convert.ToInt32(autoRotateSpeed);
                }
            }

            string itemsPerRow = String.Empty;
            string slidesToShow = String.Empty;

            switch (Model.ItemsPerRow)
            {
                case USNOptions.ItemsPerRow_1:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 1";
                    }
                    else
                    {
                        itemsPerRow = "items-1 col-xs-12";
                    }
                    break;
                case USNOptions.ItemsPerRow_2:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 2, \"responsive\": [{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                    }
                    else
                    {
                        itemsPerRow = "items-2 col-xs-12";
                    }
                    break;
                case USNOptions.ItemsPerRow_3:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 3, \"responsive\": [{\"breakpoint\": 768,\"settings\": {\"slidesToShow\": 2}},{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                    }
                    else
                    {
                        itemsPerRow = "items-3 col-xs-12";
                    }
                    break;
                case USNOptions.ItemsPerRow_4:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 4, \"responsive\": [{\"breakpoint\": 992,\"settings\": {\"slidesToShow\": 3}},{\"breakpoint\": 768,\"settings\": {\"slidesToShow\": 2}},{\"breakpoint\": 480,\"settings\": {\"slidesToShow\": 1}}]";
                    }
                    else
                    {
                        itemsPerRow = "items-4 col-xs-12";
                    }
                    break;
                default:
                    if (Model.EnableCarousel)
                    {
                        slidesToShowAttribute = "\"slidesToShow\": 1";
                    }
                    else
                    {
                        itemsPerRow = "items-1 col-xs-12";
                    }
                    break;
            }

            //Add commas
            dotsAttribute = autoRotateAttribute != String.Empty ? dotsAttribute = "," + dotsAttribute : dotsAttribute;
            arrowsAttribute = autoRotateAttribute != String.Empty || dotsAttribute != String.Empty ? "," + arrowsAttribute : arrowsAttribute;
            slidesToShowAttribute = autoRotateAttribute != String.Empty || dotsAttribute != String.Empty || arrowsAttribute != String.Empty ? "," + slidesToShowAttribute : slidesToShowAttribute;

            slickAttributes = Model.EnableCarousel ? String.Format(slickAttributes, autoRotateAttribute, dotsAttribute, arrowsAttribute, slidesToShowAttribute) : String.Empty;

            int imageWidthSmall = 8;
            int imageHeightSmall = 6;
            string cropAlias = "Landscape";
            string circleClass = String.Empty;

            switch (Model.ImageStyle)
            {
                case USNOptions.ImageStyle_Square:
                    imageWidthSmall = 8;
                    imageHeightSmall = 8;
                    cropAlias = "Square/Circle";
                    break;
                case USNOptions.ImageStyle_Landscape:
                    imageWidthSmall = 8;
                    imageHeightSmall = 6;
                    cropAlias = "Landscape";
                    break;
                case USNOptions.ImageStyle_Portrait:
                    imageWidthSmall = 6;
                    imageHeightSmall = 8;
                    cropAlias = "Portrait";
                    break;
                case USNOptions.ImageStyle_Circle:
                    imageWidthSmall = 8;
                    imageHeightSmall = 8;
                    cropAlias = "Square/Circle";
                    circleClass = "img-circle";
                    break;
                case USNOptions.ImageStyle_Wide:
                    imageWidthSmall = 120;
                    imageHeightSmall = 63;
                    cropAlias = "Wide";
                    break;
            }

            if (Model.EnableCarousel)
            {
                @:<div class="row slides" @Html.Raw(slickAttributes)>
            }
            else
            {
                @:<div class="row">
            }
            foreach (IPublishedContent galleryItem in Model.ImageVideo)
            {
                string lightWindow = String.Empty;
                string title = String.Empty;
                string footer = String.Empty;

                if (galleryItem.IsDocumentType(Usn_Sc_GalleryImage.ModelTypeAlias))
                {
                    Usn_Sc_GalleryImage galleryImage = (Usn_Sc_GalleryImage)galleryItem;

                    if (!galleryImage.DisableLightWindow)
                    {
                        lightWindow = " data-toggle=\"lightbox\" data-type=\"image\" data-gallery=\"galleryname-" + Model.Id + "\"";

                        if (galleryImage.LightWindowTitle.HasValue())
                        {
                            title = "data-title=\"" + galleryImage.LightWindowTitle + "\"";
                        }

                        if (galleryImage.LightWindowFooter.HasValue())
                        {
                            footer = "data-footer=\"" + galleryImage.LightWindowFooter + "\"";
                        }
                    }

                    if (galleryImage.LightWindowImage != null)
                    {

                        string linkUrl = String.Empty;
                        string linkTarget = String.Empty;

                        if (galleryImage.DisableLightWindow && galleryImage.ImageLink.HasValue())
                        {

                            USNLink imageLink = USNUrlHelper.GetLinkFromRelatedLinks(galleryImage.ImageLink);

                            if (imageLink != null)
                            {
                                linkUrl = imageLink.LinkURL;
                                linkTarget = imageLink.LinkTarget;
                            }
                        }
                        else if (!galleryImage.DisableLightWindow)
                        {
                            linkUrl = galleryImage.LightWindowImage.Url;
                        }

                        <div class="item @circleClass @itemsPerRow">
                            <div class="image @circleClass">
                                @if (linkUrl != String.Empty)
                                {
                                    @:<a href="@linkUrl" @Html.Raw(title) @Html.Raw(footer) target="@linkTarget" @Html.Raw(lightWindow)>
                                }
                                <img class="@circleClass lazyload" src="@galleryImage.LightWindowImage.GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall)" data-src="@galleryImage.LightWindowImage.GetCropUrl(cropAlias: cropAlias)" alt="@galleryImage.ThumbnailImageAltText">
                                @if (lightWindow != String.Empty)
                                {
                                    <div class="overlayicon ion-arrow-expand c5-text"></div>
                                }
                                else if (linkUrl != String.Empty && linkTarget != String.Empty)
                                {
                                    <div class="overlayicon ion-android-open c5-text"></div>
                                }
                                else if (linkUrl != String.Empty && linkTarget == String.Empty)
                                {
                                    <div class="overlayicon ion-link c5-text"></div>
                                }
                                @if (linkUrl != String.Empty)
                                {
                                    @:</a>
                                }
                                @if (galleryImage.ImageCaption.HasValue())
                                {
                                    <div class="caption">@galleryImage.ImageCaption</div>
                                }
                            </div>
                        </div>
                    }
                }

                else
                {
                    Usn_Sc_GalleryVideo galleryVideo = (Usn_Sc_GalleryVideo)galleryItem;

                    if (galleryVideo.GalleryVideo.HasValue())
                    {
                        string videoUrlOriginal = galleryVideo.GalleryVideo;

                        USNVideo video = USNVideoHelper.GetVideoInfo(videoUrlOriginal);

                        string videoImageSrc = String.Empty;
                        string videoImageDataSrc = String.Empty;

                        if (!galleryVideo.DisableLightWindow)
                        {
                            videoImageSrc = galleryVideo.GalleryThumbnailImage != null ? galleryVideo.GalleryThumbnailImage.GetCropUrl(cropAlias: cropAlias, width: imageWidthSmall, height: imageHeightSmall) : video.VideoImage;
                            videoImageDataSrc = galleryVideo.GalleryThumbnailImage != null ? galleryVideo.GalleryThumbnailImage.GetCropUrl(cropAlias: cropAlias) : video.VideoImage;
                        }
                        else
                        {
                            circleClass = String.Empty;
                        }

                        <div class="item @circleClass @itemsPerRow">
                            <div class="image @circleClass video">
                                @if (galleryVideo.DisableLightWindow && video.VideoIFrame != String.Empty)
                                {
                                    <div class="embed-responsive embed-responsive-16by9">
                                        @Html.Raw(video.VideoIFrame)
                                    </div>
                                }
                                else
                                {
                                    if (galleryVideo.LightWindowTitle.HasValue())
                                    {
                                        title = "data-title=\"" + galleryVideo.LightWindowTitle + "\"";
                                    }

                                    if (galleryVideo.LightWindowFooter.HasValue())
                                    {
                                        footer = "data-footer=\"" + galleryVideo.LightWindowFooter + "\"";
                                    }

                                    <a href="@video.VideoURLModified" @Html.Raw(title) @Html.Raw(footer) data-toggle="lightbox" @Html.Raw(video.VideoDataRemote) data-gallery="galleryname-@Model.Id">
                                        <img class="@circleClass lazyload" src="@videoImageSrc" data-src="@videoImageDataSrc" alt="@galleryVideo.ThumbnailImageAltText">
                                        <div class="overlayicon ion-ios-play c5-text"></div>
                                    </a>
                                }
                                @if (galleryVideo.VideoCaption.HasValue())
                                {
                                <div class="caption">@galleryVideo.VideoCaption</div>
                                }
                            </div>
                        </div>
                    }

                }
            }

            @Html.Raw("</div>")

        }

        @Html.Partial("USNMiscPageElements/USN_ComponentOutro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle } })

    </div>
    <!--// PAGE COMPONENT GALLERY -->

    @* Close div for column width on Advanced Pages *@
    if (!Model.Parent.Parent.IsDocumentType(UsnstandardPage.ModelTypeAlias) && !Model.Parent.Parent.IsDocumentType(UsnstandardPageBlogPost.ModelTypeAlias))
    {
        @:</div></div></div>
    }
}