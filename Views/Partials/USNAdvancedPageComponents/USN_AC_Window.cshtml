@inherits UmbracoViewPage<Usn_Ac_Window_AN>

@using USNStarterKit.USNModels;
@using USNStarterKit.USNHelpers;
@using USN.USNTemplate;

@using USNOptions = USNStarterKit.USNEnums.Options;

@{

    string animateClass = String.Empty;

    if (Model.Animate)
    {
        animateClass = "os-animation";
    }

    string containerClass = "container-fluid";

    if (Model.FixedWidth)
    {
        containerClass = "container";
    }

    bool bigSmallOrder = false;

    USNTemplateStyleSettings settings = USNViewTemplateHelper.GetTemplateStyleSettings(Model.BackgroundColor, Model.ButtonColor);

    string backgroundImageStyle = USNViewTemplateHelper.GetBackgroundImageStyle(Model.BackgroundImage, Model.BackgroundImageOptions);

    int currentItemPosition = 1;
    int currentRow = 1;
    int currentCount = 1;
    int totalItemCount = 0;
    string rowClass = "basic-windows windows-1";

    if (Model.Windows != null)
    {
        totalItemCount = Model.Windows.Count();
    }

    int itemsPerRow = 1;

    switch (Model.ImageOrder)
    {
        case USNOptions.WindowsOrder_4_Big:
            itemsPerRow = 4;
            rowClass = "windows-4 big-window-first";
            bigSmallOrder = true;
            break;
        case USNOptions.WindowsOrder_4_Small:
            itemsPerRow = 4;
            rowClass = "windows-4 small-window-first";
            bigSmallOrder = true;
            break;
        case USNOptions.WindowsOrder_3_Big:
            itemsPerRow = 3;
            rowClass = "windows-3 big-window-first";
            bigSmallOrder = true;
            break;
        case USNOptions.WindowsOrder_3_Small:
            itemsPerRow = 3;
            rowClass = "windows-3 small-window-first";
            bigSmallOrder = true;
            break;
        case USNOptions.WindowsOrder_4:
            itemsPerRow = 4;
            rowClass = "basic-windows windows-4";
            break;
        case USNOptions.WindowsOrder_3:
            itemsPerRow = 3;
            rowClass = "basic-windows windows-3";
            break;
        case USNOptions.WindowsOrder_2:
            itemsPerRow = 2;
            rowClass = "basic-windows windows-2";
            break;
        case USNOptions.WindowsOrder_1:
            itemsPerRow = 1;
            rowClass = "basic-windows windows-1";
            break;
        default:
            itemsPerRow = 1;
            break;
    }

    <section class="content apc pod-windows @settings.BackGroundStyle @Model.CustomComponentClasses" @Html.Raw(backgroundImageStyle) id="pos_@Model.Id">
         
        @Html.Partial("USNMiscPageElements/USN_ComponentIntro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle }, { "addContainer", true } })

        @if (Model.Windows != null)
        {

		    <div class="@containerClass">
			
                @if (totalItemCount > 0)
                {
                    //If not enough images uploaded, default to basic
                    if (totalItemCount < itemsPerRow)
                    {
                        itemsPerRow = totalItemCount;
                        rowClass = "basic-windows windows-" + itemsPerRow;
                    }

                    //Get total full rows
                    int totalFullRows = totalItemCount / itemsPerRow;

                    //Get total extra items that dont fill full row
                    int extraCount = totalItemCount % itemsPerRow;

                    bool extraRow = extraCount > 0 ? true : false;

                    foreach (IPublishedContent item in Model.Windows)
                    {
                        if (currentRow > totalFullRows)
                        {
                            rowClass = "basic-windows windows-" + extraCount;
                            itemsPerRow = extraCount;
                        }

                        string animationTime = String.Format("0.{0}s", currentItemPosition.ToString());
                        string colorOverlayClass = String.Empty;

                        if (currentItemPosition == 1)
                        {
                            <!--Start main container row-->
                            @:<div class="windows text-center @rowClass">
                        }

                        if (item.IsDocumentType(Usn_Ac_WindowSectionImage.ModelTypeAlias))
                        {
                            Usn_Ac_WindowSectionImage windowSectionImage = (Usn_Ac_WindowSectionImage)item;

                            USNTemplateStyleSettings windowSettings = USNViewTemplateHelper.GetTemplateStyleSettings(windowSectionImage.BackgroundColor, windowSectionImage.ButtonColor);

                            string bgImage = String.Empty;
                            string bgImageSmall = String.Empty;

                            if (windowSectionImage.BackgroundImage != null)
                            {
                                bgImage = windowSectionImage.BackgroundImage.GetCropUrl(cropAlias: "Square/Circle");
                                bgImageSmall = "style=\"background-image:url('" + windowSectionImage.BackgroundImage.GetCropUrl(cropAlias: "Square/Circle", width: 8, height: 8) + "')\"";
                            }

                            USNLink link = USNUrlHelper.GetLinkFromRelatedLinks(windowSectionImage.Link);

                            if (windowSectionImage.AddColorOverlay)
                            {
                                colorOverlayClass = "overlay";
                            }

                            <!-- ITEM -->
                            <div class="item @colorOverlayClass @animateClass" data-os-animation="fadeIn" data-os-animation-delay="@animationTime">

                                <!-- INFO -->
                                @if (link != null)
                                {
                                    @:<a href="@link.LinkURL" @Html.Raw(link.LinkTarget) @Html.Raw(link.LinkTitle) class="info @windowSettings.BackGroundStyle">
                                }
                                else
                                {
                                    @:<div class="info @windowSettings.BackGroundStyle">
                                }

                                <!-- IMAGE -->
                                <div class="image lazyload" @Html.Raw(bgImageSmall) data-bg="@bgImage">
                                </div>
                                <!--// IMAGE -->

                                <div class="table">
                                    <div class="table-cell">

                                        <!-- INNER -->
                                        <div class="inner">
                                            @if (windowSectionImage.SecondaryHeading.HasValue())
                                            {
                                                <p class="secondary-heading @windowSettings.SecondaryHeadingStyle">@windowSectionImage.SecondaryHeading</p>
                                            }
                                            @if (windowSectionImage.Heading != null)
                                            {
                                                @Html.Raw(String.Format("<{0} class=\"heading main {1}\">{2}</{0}>", windowSectionImage.Heading.HeadingTag, windowSettings.HeadingStyle, windowSectionImage.Heading.Text))
                                            }
                                            @if (windowSectionImage.Text.HasValue())
                                            {
                                                <div class="text @windowSettings.TextStyle">
                                                    @Html.Raw(windowSectionImage.Text)
                                                </div>
                                            }
                                            @if (link != null)
                                            {
                                                <p class="link"><span class="btn btn-xs @windowSettings.ButtonStyle">@link.LinkCaption@Html.Raw(link.LinkIcon)</span></p>
                                            }

                                        </div>
                                        <!--// INNER -->

                                    </div>
                                </div>

                                @if (link != null)
                                {
                                    @:</a>
                                }
                                else
                                {
                                    @:</div>
                                }
                                <!--// INFO -->

                            </div>
                            <!--// ITEM -->
                        }
                        else
                        {
                            Usn_Ac_WindowSectionVideo windowSectionVideo = (Usn_Ac_WindowSectionVideo)item;

                            USNTemplateStyleSettings windowSettings = USNViewTemplateHelper.GetTemplateStyleSettings(windowSectionVideo.BackgroundColor, windowSectionVideo.ButtonColor);

                            string bgImage = String.Empty;
                            string bgImageSmall = String.Empty;

                            if (windowSectionVideo.BackgroundImage != null)
                            {
                                bgImage = windowSectionVideo.BackgroundImage.GetCropUrl(cropAlias: "Square/Circle");
                                bgImageSmall = "style=\"background-image:url('" + windowSectionVideo.BackgroundImage.GetCropUrl(cropAlias: "Square/Circle", width: 8, height: 8) + "')\"";
                            }

                            string title = String.Empty;
                            string footer = String.Empty;

                            string videoUrlOriginal = windowSectionVideo.VideoUrl;

                            if (windowSectionVideo.LightWindowTitle.HasValue())
                            {
                                title = "data-title=\"" + windowSectionVideo.LightWindowTitle + "\"";
                            }

                            if (windowSectionVideo.LightWindowFooter.HasValue())
                            {
                                footer = "data-footer=\"" + windowSectionVideo.LightWindowFooter + "\"";
                            }

                            USNVideo video = USNVideoHelper.GetVideoInfo(videoUrlOriginal);

                            if (windowSectionVideo.AddColorOverlay)
                            {
                                colorOverlayClass = "overlay";
                            }

                            <!-- ITEM -->
                            <div class="item @colorOverlayClass video @animateClass" data-os-animation="fadeIn" data-os-animation-delay="@animationTime">

                                <!-- INFO -->
                                <a href="@video.VideoURLModified" @Html.Raw(title) @Html.Raw(footer) data-toggle="lightbox" @Html.Raw(video.VideoDataRemote) class="info @windowSettings.BackGroundStyle">

                                    <!-- IMAGE -->
								    <div class="image lazyload" @Html.Raw(bgImageSmall) data-bg="@bgImage">
								    </div>
								    <!--// IMAGE -->

                                    <div class="table">
                                        <div class="table-cell">

                                            <!-- INNER -->
                                            <div class="inner">

                                                <p class="link"><span class="btn btn-xs @windowSettings.ButtonStyle">@umbraco.library.GetDictionaryItem("USN Window Section Component Play Video")</span></p>

                                            </div>
                                            <!--// INNER -->
                                            <!-- VIDEO OVERLAYICON -->
                                            <div class="overlayicon ion-ios-play @windowSettings.HeadingStyle"></div>
                                            <!--// VIDEO OVERLAYICON -->

                                        </div>
                                    </div>

                                </a>
                                <!--// INFO -->

                            </div>
                            <!--// ITEM -->
                        }

                         //alternate layout
                        if (bigSmallOrder && currentItemPosition == itemsPerRow)
                        {
                            if (rowClass == "windows-4 big-window-first")
                            {
                                rowClass = "windows-4 small-window-first";
                            }
                            else if (rowClass == "windows-4 small-window-first")
                            {
                                rowClass = "windows-4 big-window-first";
                            }
                            else if (rowClass == "windows-3 big-window-first")
                            {
                                rowClass = "windows-3 small-window-first";
                            }
                            else if (rowClass == "windows-3 small-window-first")
                            {
                                rowClass = "windows-3 big-window-first";
                            }
                        }

                        if (currentCount == totalItemCount || currentItemPosition == itemsPerRow)
                        {
                            <!--End main container row-->
                            @:</div>

                            currentRow += 1;
                        }

                        currentItemPosition += 1;
                        currentCount += 1;

                        //Each main row starts when item count hits 1 + itemsPerRow. Reset to 1 here
                        currentItemPosition = currentItemPosition == (itemsPerRow + 1) ? 1 : currentItemPosition;
                    }

                }

            </div>

        }

        @Html.Partial("USNMiscPageElements/USN_ComponentOutro", @Model as IUsn_Cmp_IntroOutro, new ViewDataDictionary { { "animateClass", animateClass }, { "headingStyle", settings.HeadingStyle }, { "secondaryHeadingStyle", settings.SecondaryHeadingStyle }, { "textStyle", settings.TextStyle }, { "buttonStyle", settings.ButtonStyle }, { "addContainer", true } })

    </section>

}
